# Auther: Yehonatan Lusky
# ID:     315690677

from scipy.io import loadmat
import numpy as np
import matplotlib.pyplot as plt


aes_inv_sbox = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

def get_sbox_inverse(byte):
    '''
    This function performs inverse sub bytes
    '''
    return aes_inv_sbox[byte]


def hamming_weight(byte):
    '''
    This function simply recieves a byte and calculates its hamming weight
    '''
    hw = 0
    while (byte):
        hw += byte & 1
        byte >>= 1
    return hw


def main():
    # Those are the arguments for the mat_cpa function
    # This is also where we read the tables into the program memory
    tab_obs  = loadmat('tab_Obs_0cm.mat')
    ciph_dec = loadmat('parsed_cipher_0cm.mat')
    sbox_n   = 2
    
    # Part 1
    # We simply calculate the standard deviation of the bytes hamming weight table
    hw_table = np.array([hamming_weight(byte) for byte in range(256)])
    s = np.std(hw_table, ddof=1)
    
    # Part 2
    # Now we get the targeted byte one time with inv_shift rows and one time without it.
    invShiftRows_sbox=[1, 6, 11, 16, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12]
    F5 = np.array([res[invShiftRows_sbox[sbox_n - 1] - 1] for res in ciph_dec.values()[0]])
    F1 = np.array([res[sbox_n - 1] for res in ciph_dec.values()[0]])

    # Part 3
    # Now we calculate the hamming distance.
    # The hamming distance for the right key byte should be correlated to the em traces (and they should be correlated to the power traces).
    K = np.array([i for i in range(256)])
    Nb_Measures = len(F5);
    tmp = np.bitwise_xor(np.array([([byte] * len(K)) for byte in F1]), np.array([K] * len(F1)))
    get_inv = np.vectorize(get_sbox_inverse)
    I5  = get_inv(tmp)
    dst = np.bitwise_xor(np.array([([byte] * len(K)) for byte in F5]), I5)
    get_hw  = np.vectorize(hamming_weight)
    hd = get_hw(dst)

    # Part 4
    # Now we get the correlation between the two
    prediction = (hd - 4)/s
    n_mesure = len(tab_obs.values()[0])
    tab_obs = np.array([i for i in tab_obs.values()[0]])
    Obs = np.divide(tab_obs - np.mean(tab_obs, axis = 0), np.array([np.std(tab_obs, ddof=1, axis = 0)] * n_mesure))   
    mat_cpa = (np.dot(Obs.transpose(), prediction)) / Nb_Measures
    
    # Part 5 - output data
    # Output the key and the plot. We also check te cell with the maximum correlation and this should be our key.
    # It should be noted that the matlab programs outputs the wrong key since it outputs the index which starts from 1 and end with 256. 
    # However the key is between 0 and 255.    
    print ("The maximum correlation is: " + str(np.amax(np.absolute(mat_cpa))))
    print ("The key value is: " + str(hex(np.where(np.absolute(mat_cpa) == np.amax(np.absolute(mat_cpa)))[1])))
    plt.plot(mat_cpa)
    plt.show()
    
    # This is it :)
   



if __name__ == "__main__":
    main()